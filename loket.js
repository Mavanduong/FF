// ==UserScript==
// @name         AutoHeadlockProMax v11.1 - SwipeToLock GodCore+
// @version      11.1
// @description  Vu·ªët nh·∫π l√† ghim ƒë·∫ßu ch√≠nh x√°c. Auto Aim, Snap Correction, B·ªè th√¢n, T·ª± b·∫Øn. Si√™u m∆∞·ª£t tr√™n Shadowrocket.
// ==/UserScript==

(function () {
  const config = {
    aimSpeed: 8000,              // T·ªëc ƒë·ªô aim c·ª±c nhanh (buff)
    maxDistance: 250,            // Ph·∫°m vi t·ªëi ƒëa xa h∆°n
    headOffset: { x: 0, y: -18 },// ∆Øu ti√™n v√πng ƒë·∫ßu (tr√°nh c·ªï)
    snapCorrection: true,
    predictiveAim: true,
    autoFire: true,
    bodyIgnore: true,
    objectDetection: true
  };

  let lastTouch = null;

  document.addEventListener("touchstart", function (e) {
    lastTouch = e.touches[0];
  });

  document.addEventListener("touchmove", function (e) {
    const touch = e.touches[0];
    const deltaX = touch.clientX - lastTouch.clientX;
    const deltaY = touch.clientY - lastTouch.clientY;

    const swipeThreshold = 3; // Nh·∫°y h∆°n ‚Äì ch·ªâ c·∫ßn vu·ªët nh·∫π l√† k√≠ch ho·∫°t
    if (Math.abs(deltaX) > swipeThreshold || Math.abs(deltaY) > swipeThreshold) {
      activateHeadlock(touch.clientX, touch.clientY);
      lastTouch = touch; // c·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ vu·ªët
    }
  });

  // T·ª± ƒë·ªông kh√≥a l·∫°i li√™n t·ª•c n·∫øu ƒëang vu·ªët
  setInterval(() => {
    if (lastTouch) {
      activateHeadlock(lastTouch.clientX, lastTouch.clientY);
    }
  }, 10); // 10ms/ l·∫ßn ‚Üí c·ª±c nhanh

  function activateHeadlock(x, y) {
    const enemy = findNearestEnemy(x, y);
    if (!enemy || (config.objectDetection && enemy.blocked)) return;

    let headX = enemy.x + config.headOffset.x;
    let headY = enemy.y + config.headOffset.y;

    if (config.predictiveAim) {
      headX += predict(enemy.vx);
      headY += predict(enemy.vy);
    }

    aimAt(headX, headY);

    if (config.autoFire && isOnHead(headX, headY, enemy)) {
      fire();
    }
  }

  function findNearestEnemy(x, y) {
    // ‚ö†Ô∏è GI·∫¢ L·∫¨P ‚Äì c·∫ßn k·∫øt n·ªëi v·ªõi game th·∫≠t ho·∫∑c packet
    return {
      x: x + 25,
      y: y - 85,
      vx: 2.2,
      vy: -1.8,
      blocked: false
    };
  }

  function aimAt(x, y) {
    console.log("üî´ Aim locked at:", x, y);
    // G·ªçi API ng·∫Øm (hook game ho·∫∑c framework)
  }

  function fire() {
    console.log("üî• Auto Fire!");
    // Trigger n√∫t b·∫Øn t·ª± ƒë·ªông
  }

  function isOnHead(x, y, enemy) {
    const dx = Math.abs(x - (enemy.x + config.headOffset.x));
    const dy = Math.abs(y - (enemy.y + config.headOffset.y));
    return dx < 6 && dy < 6; // ki·ªÉm tra l·ªách nh·ªè h∆°n ƒë·ªÉ ch√≠nh x√°c h∆°n
  }

  function predict(v) {
    return v * 6; // d·ª± ƒëo√°n m·∫°nh h∆°n (6 frame)
  }
})();
