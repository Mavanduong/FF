// ==UserScript==
// @name         AutoHeadlockProMax v11.2 - DynamicSpeedAim GodSwipe
// @version      11.2
// @description  Ghim ƒë·∫ßu si√™u t·ªëc ƒë·ªô khi vu·ªët. T√¢m b√°m ƒë·∫ßu AI m·∫°nh. T·ª± aim, t·ª± b·∫Øn, snap c·ª±c nhanh, b·ªè th√¢n, override chuy·ªÉn ƒë·ªông.
// ==/UserScript==

(function () {
  const config = {
    aimSpeed: 12000,             // T·ªëc ƒë·ªô aim si√™u cao
    maxDistance: 300,
    headOffset: { x: 0, y: -18 },
    predictiveAim: true,
    autoFire: true,
    snapCorrection: true,
    bodyIgnore: true,
    objectDetection: true,
    maxSnapForce: 25             // L·ª±c k√©o t√¢m t·ª©c th√¨
  };

  let lastTouch = null;

  document.addEventListener("touchstart", function (e) {
    lastTouch = e.touches[0];
  });

  document.addEventListener("touchmove", function (e) {
    const touch = e.touches[0];
    const deltaX = touch.clientX - lastTouch.clientX;
    const deltaY = touch.clientY - lastTouch.clientY;

    const swipeThreshold = 3;
    if (Math.abs(deltaX) > swipeThreshold || Math.abs(deltaY) > swipeThreshold) {
      activateHeadlock(touch.clientX, touch.clientY, true);
      lastTouch = touch;
    }
  });

  // Theo d√µi v√† ghim ƒë·∫ßu li√™n t·ª•c n·∫øu ƒëang vu·ªët
  setInterval(() => {
    if (lastTouch) {
      activateHeadlock(lastTouch.clientX, lastTouch.clientY, false);
    }
  }, 8); // t·ªëc ƒë·ªô kh√≥a li√™n t·ª•c cao h∆°n (8ms)

  function activateHeadlock(x, y, isSwipe) {
    const enemy = findNearestEnemy(x, y);
    if (!enemy || (config.objectDetection && enemy.blocked)) return;

    let headX = enemy.x + config.headOffset.x;
    let headY = enemy.y + config.headOffset.y;

    if (config.predictiveAim) {
      headX += predict(enemy.vx);
      headY += predict(enemy.vy);
    }

    if (config.snapCorrection && isSwipe) {
      snapTo(headX, headY); // di t√¢m si√™u t·ªëc khi vu·ªët
    }

    aimAt(headX, headY);

    if (config.autoFire && isOnHead(headX, headY, enemy)) {
      fire();
    }
  }

  function findNearestEnemy(x, y) {
    // ‚ö†Ô∏è gi·∫£ l·∫≠p enemy ‚Äì thay b·∫±ng API game th·ª±c
    return {
      x: x + 25,
      y: y - 85,
      vx: 2.5,
      vy: -1.9,
      blocked: false
    };
  }

  function aimAt(x, y) {
    console.log("üéØ T√¢m ghim t·ªõi:", x, y);
    // G·ªçi API ng·∫Øm ho·∫∑c can thi·ªáp offset chu·ªôt/t√¢m
  }

  function snapTo(x, y) {
    console.log("‚ö° Snap nhanh ƒë·∫øn ƒë·∫ßu:", x, y);
    // T√¢m nh·∫£y g·∫Øt ƒë·∫øn v·ªã tr√≠ ƒë·∫ßu b·∫±ng l·ª±c c·ª±c m·∫°nh
    // Hook chu·ªôt ho·∫∑c API game c·∫ßn force
    const dx = x - window.innerWidth / 2;
    const dy = y - window.innerHeight / 2;
    simulateMouseMove(dx / config.maxSnapForce, dy / config.maxSnapForce);
  }

  function simulateMouseMove(dx, dy) {
    // Gi·∫£ l·∫≠p k√©o chu·ªôt ‚Äì hook engine ri√™ng
    console.log(`üåÄ D·ªãch chuy·ªÉn t√¢m: dx=${dx}, dy=${dy}`);
    // ·ªû m√¥i tr∆∞·ªùng th·ª±c c√≥ th·ªÉ d√πng API native ho·∫∑c hook offset game
  }

  function fire() {
    console.log("üî• Auto Fire!");
    // G·ªçi trigger b·∫Øn
  }

  function isOnHead(x, y, enemy) {
    const dx = Math.abs(x - (enemy.x + config.headOffset.x));
    const dy = Math.abs(y - (enemy.y + config.headOffset.y));
    return dx < 6 && dy < 6;
  }

  function predict(v) {
    return v * 6;
  }
})();
