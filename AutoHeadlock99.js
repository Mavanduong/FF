// ==UserScript==
// @name         AutoHeadlockProMax
// @version      1.0
// @description  Ghim ƒë·∫ßu to√†n di·ªán: vu·ªët nh·∫π, ƒëa t∆∞ th·∫ø, ƒëa kho·∫£ng c√°ch, prediction
// ==/UserScript==

console.log("üéØ AutoHeadlockProMax ACTIVATED");

if (!$response || !$response.body) {
  $done({});
  return;
}

let body = $response.body;

try {
  const HEAD_BONE = "head";
  const MAX_DISTANCE = 120.0; // ch·ªâ x·ª≠ l√Ω ƒë·ªãch trong ph·∫°m vi 120m
  const PREDICTION_STRENGTH = 1.2; // h·ªá s·ªë d·ª± ƒëo√°n chuy·ªÉn ƒë·ªông
  const AIM_PRIORITY = 999;

  let data = JSON.parse(body);

  if (data && data.targets) {
    for (let enemy of data.targets) {
      if (!enemy || !enemy.bone || !enemy.bone[HEAD_BONE]) continue;

      let head = enemy.bone[HEAD_BONE];

      // T√≠nh kho·∫£ng c√°ch 3D
      let dx = head.x - data.player.x;
      let dy = head.y - data.player.y;
      let dz = head.z - data.player.z;
      let distance = Math.sqrt(dx * dx + dy * dy + dz * dz);

      if (distance > MAX_DISTANCE) continue; // b·ªè qua ƒë·ªãch qu√° xa

      // X·ª≠ l√Ω prediction theo h∆∞·ªõng chuy·ªÉn ƒë·ªông ƒë·ªãch
      let velocity = enemy.velocity || { x: 0, y: 0, z: 0 };
      let predictHead = {
        x: head.x + velocity.x * PREDICTION_STRENGTH,
        y: head.y + velocity.y * PREDICTION_STRENGTH,
        z: head.z + velocity.z * PREDICTION_STRENGTH
      };

      // ∆Øu ti√™n n·∫øu ƒë·ªãch ƒëang ƒë·ª©ng ho·∫∑c nh·∫£y
      if (enemy.posture === "jumping" || enemy.posture === "standing") {
        enemy.aimPosition = predictHead;
        enemy.autoLock = true;
        enemy.priority = AIM_PRIORITY;
        enemy.recoilControl = true;
        enemy.lockZone = "HEAD";
        enemy.aimHelp = true;
      }
    }
  }

  body = JSON.stringify(data);
} catch (e) {
  console.log("‚ùå AutoHeadlockProMax ERROR: " + e);
}

$done({ body });

